@isTest
static void testSecAPIScan_InvalidUserStory() {
    Test.startTest();
    try {
        SecAPIScanController.secAPIScan(null);
        System.assert(false, 'Expected an exception for null user story ID');
    } catch (AuraHandledException e) {
        System.assert(e.getMessage().contains('User does not have permission'));
    }
    Test.stopTest();
}
@isTest
static void testSCAScan_ApiFailure() {
    List<copado__User_Story__c> usItem = [SELECT Id FROM copado__User_Story__c LIMIT 1];

    SecApiMockHttpResponseGenerator fakeResponse = new SecApiMockHttpResponseGenerator(500, 'Error', '{"message": "Internal Server Error"}', null);
    Test.setMock(HttpCalloutMock.class, fakeResponse);
    
    Test.startTest();
    try {
        SecAPIScanController.SCAScan(usItem[0].id);
        System.assert(false, 'Expected an exception for failed API call');
    } catch (AuraHandledException e) {
        System.assert(e.getMessage().contains('Error occurred during 1st callout'));
    }
    Test.stopTest();
}
@isTest
static void testGetUserStoryDetails_NoAccess() {
    Test.startTest();
    try {
        SecAPIScanController.getUserStoryDetails('some-invalid-id');
        System.assert(false, 'Expected an exception due to missing access');
    } catch (AuraHandledException e) {
        System.assert(e.getMessage().contains('Users do not have appropriate access'));
    }
    Test.stopTest();
}
